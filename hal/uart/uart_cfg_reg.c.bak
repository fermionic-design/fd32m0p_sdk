#include "UART_REGS.h"
#include "UART_RW_API.h"
#include "IOMUX_REGS.h"
#include "IOMUX_RW_API.h"

#define UART_REGS ((UART_REGS_s *) 0x3ffd3000) //this should be uart address space
#define IOMUX_REGS ((IOMUX_REGS_s *) 0x3FFC4000) //this should iomux address space 

//Uart Initialization
void UartStdOutRegInit(void)
{
    UART_PWR_EN_WRITE(UART_REGS, 1, 0x7D);

    UART_REGS->RST_CTRL.packed_w = 0x7D000001;
    if((UART_REGS->RST_STS.packed_w & UART_RST_STS_rst_sts_MASK) == 1){
      //printf("deasserting the reset\n");
      UART_RST_CTRL_WRITE(UART_REGS, 0, 1, 0x7D);
        }
    UART_REGS->CLK_SEL.packed_w = 0x00030000; //addr = 20
    UART_REGS->CLK_DIV.packed_w = 0x00070000; //addr = 24
    UART_UART_CLKCFG_WRITE(UART_REGS, 1, 0x13); //addr = 60
    UART_REGS->UART_GFCTL.packed_w = 0x00000000; //addr = 76
    UART_REGS->UART_BRDNUM.packed_w = 0x00000000;
    UART_REGS->UART_BRDDEN.packed_w = 0x00000000;
    UART_REGS->CLK_CTRL.packed_w = 0x00000001;
}
//configuration of frame_length "wrd_len" reg
void CFG_UartFrameLength(int length)
{
    int word_length;
    if(length==5){
        word_length = 0;
    } else if(length==6){
        word_length = 1;
    } else if(length==7){
        word_length = 2;
    } else if(length==8){
        word_length = 3;
    }
    UART_REGS->UART_CFG.UART_CFG.wrd_len = word_length;
}

//configuration of parity_en/dis, even/odd
void CFG_UartParityen(int parity_en, int parity_type, int stick_parity)
{
    UART_REGS->UART_CFG.UART_CFG.par_en = parity_en;
    UART_REGS->UART_CFG.UART_CFG.evn_par = parity_type; //parity_type =1 (even parity), parity_type=0(odd_parity)
    UART_REGS->UART_CFG.UART_CFG.stck_par = stick_parity; //parity is stick on single value if stck_par is high
}

//configuration of stop bit, 1 or 2 bit stop
void CFG_UartStopBit(int stop_bit)
{
    UART_REGS->UART_CFG.UART_CFG.stop_bit = stop_bit;
}

//configuration data trasfer, msb_first/lsb_first
void CFG_UartMsbFirst(int uart_enable, int msb_first)
{
    UART_REGS->UART_CTRL.UART_CTRL.uart_en = uart_enable;
    UART_REGS->UART_CTRL.UART_CTRL.uart_msb = msb_first;
}

//configuration of UART port with IOMUX
void CFG_UartIOMux()
{
    //PA8[2]-Tx_port
    IOMUX_REGS->PA_8.PA_8.output_en = 1;
    IOMUX_REGS->PA_8.PA_8.input_en  = 0;
    IOMUX_REGS->PA_8.PA_8.sel       = 2;
    
    //PA9[2]-Rx_port 
    IOMUX_REGS->PA_9.PA_9.output_en = 0;
    IOMUX_REGS->PA_9.PA_9.input_en  = 1;
    IOMUX_REGS->PA_9.PA_9.sel       = 2;

    //PA12[2]-CTS
    IOMUX_REGS->PA_12.PA_12.output_en = 0;
    IOMUX_REGS->PA_12.PA_12.input_en  = 1;
    IOMUX_REGS->PA_12.PA_12.sel       = 2;

    //PA13[2]-RTS
    IOMUX_REGS->PA_13.PA_13.output_en = 1;
    IOMUX_REGS->PA_13.PA_13.input_en  = 0;
    IOMUX_REGS->PA_13.PA_13.sel       = 2;
///////////////////////////////////////////////////
    //PA8[2]-Tx_port
    IOMUX_REGS->PA_0.PA_0.output_en = 1;
    IOMUX_REGS->PA_0.PA_0.input_en  = 0;
    IOMUX_REGS->PA_0.PA_0.sel       = 2;
    
    //PA9[2]-Rx_port 
    IOMUX_REGS->PA_1.PA_1.output_en = 0;
    IOMUX_REGS->PA_1.PA_1.input_en  = 1;
    IOMUX_REGS->PA_1.PA_1.sel       = 2;

    //PA12[2]-CTS
    IOMUX_REGS->PA_3.PA_3.output_en = 0;
    IOMUX_REGS->PA_3.PA_3.input_en  = 1;
    IOMUX_REGS->PA_3.PA_3.sel       = 4;

    //PA13[2]-RTS
    IOMUX_REGS->PA_4.PA_4.output_en = 1;
    IOMUX_REGS->PA_4.PA_4.input_en  = 0;
    IOMUX_REGS->PA_4.PA_4.sel       = 4;

}

//Baud rate calculation
void UartBaudrate(int baud, int uart_clock, int oversampling)
{
    float baud_rate_div;
    int intbaudrate;
    int fracbaudrate;
    float frac_baud_rate;

    UART_REGS->UART_CTRL.UART_CTRL.os = oversampling;

    baud_rate_div = (float) uart_clock/(oversampling*baud);
    intbaudrate = baud_rate_div;
    frac_baud_rate = (float) (baud_rate_div - intbaudrate) * 64; //baud_rate divisor is 22bit number consist of 16bit integer and 6bit fraction so fraction baud rate is multiple of 2^6=64
    fracbaudrate = frac_baud_rate;

}




