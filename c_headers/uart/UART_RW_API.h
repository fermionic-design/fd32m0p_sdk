#include "UART_REGS.h"

static inline void UART_DESC_WRITE(UART_REGS_s * registers, uint32_t module_type, uint32_t module_subtype, uint32_t major_rev, uint32_t minor_rev) {
    registers->DESC.packed_w =  + ((module_type<<UART_DESC_MODULE_TYPE_OFS)&UART_DESC_MODULE_TYPE_MASK) + ((module_subtype<<UART_DESC_MODULE_SUBTYPE_OFS)&UART_DESC_MODULE_SUBTYPE_MASK) + ((major_rev<<UART_DESC_MAJOR_REV_OFS)&UART_DESC_MAJOR_REV_MASK) + ((minor_rev<<UART_DESC_MINOR_REV_OFS)&UART_DESC_MINOR_REV_MASK);
}

static inline void UART_PWR_EN_WRITE(UART_REGS_s * registers, uint32_t pwr_en, uint32_t pwr_en_key) {
    registers->PWR_EN.packed_w =  + ((pwr_en<<UART_PWR_EN_PWR_EN_OFS)&UART_PWR_EN_PWR_EN_MASK) + ((pwr_en_key<<UART_PWR_EN_PWR_EN_KEY_OFS)&UART_PWR_EN_PWR_EN_KEY_MASK);
}

static inline void UART_RST_CTRL_WRITE(UART_REGS_s * registers, uint32_t rst, uint32_t rst_sts_clr, uint32_t rst_key) {
    registers->RST_CTRL.packed_w =  + ((rst<<UART_RST_CTRL_RST_OFS)&UART_RST_CTRL_RST_MASK) + ((rst_sts_clr<<UART_RST_CTRL_RST_STS_CLR_OFS)&UART_RST_CTRL_RST_STS_CLR_MASK) + ((rst_key<<UART_RST_CTRL_RST_KEY_OFS)&UART_RST_CTRL_RST_KEY_MASK);
}

static inline void UART_RST_STS_WRITE(UART_REGS_s * registers, uint32_t rst_sts) {
    registers->RST_STS.packed_w =  + ((rst_sts<<UART_RST_STS_RST_STS_OFS)&UART_RST_STS_RST_STS_MASK);
}

static inline void UART_CLK_CTRL_WRITE(UART_REGS_s * registers, uint32_t clk_en) {
    registers->CLK_CTRL.packed_w =  + ((clk_en<<UART_CLK_CTRL_CLK_EN_OFS)&UART_CLK_CTRL_CLK_EN_MASK);
}

static inline void UART_CLK_SEL_WRITE(UART_REGS_s * registers, uint32_t clk_sel) {
    registers->CLK_SEL.packed_w =  + ((clk_sel<<UART_CLK_SEL_CLK_SEL_OFS)&UART_CLK_SEL_CLK_SEL_MASK);
}

static inline void UART_CLK_DIV_WRITE(UART_REGS_s * registers, uint32_t clk_div) {
    registers->CLK_DIV.packed_w =  + ((clk_div<<UART_CLK_DIV_CLK_DIV_OFS)&UART_CLK_DIV_CLK_DIV_MASK);
}

static inline void UART_DBG_CTRL_WRITE(UART_REGS_s * registers, uint32_t run_on_halt, uint32_t soft_stop) {
    registers->DBG_CTRL.packed_w =  + ((run_on_halt<<UART_DBG_CTRL_RUN_ON_HALT_OFS)&UART_DBG_CTRL_RUN_ON_HALT_MASK) + ((soft_stop<<UART_DBG_CTRL_SOFT_STOP_OFS)&UART_DBG_CTRL_SOFT_STOP_MASK);
}

static inline void UART_INTR_EVENT_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout, uint32_t frame_err, uint32_t parity_err, uint32_t underflow_err, uint32_t overflow_err, uint32_t maj_vote_err, uint32_t tx_fifo_almost_full, uint32_t tx_fifo_full, uint32_t tx_fifo_almost_empty, uint32_t tx_fifo_empty, uint32_t rx_fifo_almost_full, uint32_t rx_fifo_full, uint32_t rx_fifo_almost_empty, uint32_t rx_fifo_empty, uint32_t rcv_negedge, uint32_t rcv_posedge, uint32_t rx_int, uint32_t tx_int, uint32_t cts_int, uint32_t addr_match, uint32_t baud_err, uint32_t eot, uint32_t dma_done_tx_intr, uint32_t dma_done_rx_intr) {
    registers->INTR_EVENT.packed_w =  + ((rcv_timeout<<UART_INTR_EVENT_RCV_TIMEOUT_OFS)&UART_INTR_EVENT_RCV_TIMEOUT_MASK) + ((frame_err<<UART_INTR_EVENT_FRAME_ERR_OFS)&UART_INTR_EVENT_FRAME_ERR_MASK) + ((parity_err<<UART_INTR_EVENT_PARITY_ERR_OFS)&UART_INTR_EVENT_PARITY_ERR_MASK) + ((underflow_err<<UART_INTR_EVENT_UNDERFLOW_ERR_OFS)&UART_INTR_EVENT_UNDERFLOW_ERR_MASK) + ((overflow_err<<UART_INTR_EVENT_OVERFLOW_ERR_OFS)&UART_INTR_EVENT_OVERFLOW_ERR_MASK) + ((maj_vote_err<<UART_INTR_EVENT_MAJ_VOTE_ERR_OFS)&UART_INTR_EVENT_MAJ_VOTE_ERR_MASK) + ((tx_fifo_almost_full<<UART_INTR_EVENT_TX_FIFO_ALMOST_FULL_OFS)&UART_INTR_EVENT_TX_FIFO_ALMOST_FULL_MASK) + ((tx_fifo_full<<UART_INTR_EVENT_TX_FIFO_FULL_OFS)&UART_INTR_EVENT_TX_FIFO_FULL_MASK) + ((tx_fifo_almost_empty<<UART_INTR_EVENT_TX_FIFO_ALMOST_EMPTY_OFS)&UART_INTR_EVENT_TX_FIFO_ALMOST_EMPTY_MASK) + ((tx_fifo_empty<<UART_INTR_EVENT_TX_FIFO_EMPTY_OFS)&UART_INTR_EVENT_TX_FIFO_EMPTY_MASK) + ((rx_fifo_almost_full<<UART_INTR_EVENT_RX_FIFO_ALMOST_FULL_OFS)&UART_INTR_EVENT_RX_FIFO_ALMOST_FULL_MASK) + ((rx_fifo_full<<UART_INTR_EVENT_RX_FIFO_FULL_OFS)&UART_INTR_EVENT_RX_FIFO_FULL_MASK) + ((rx_fifo_almost_empty<<UART_INTR_EVENT_RX_FIFO_ALMOST_EMPTY_OFS)&UART_INTR_EVENT_RX_FIFO_ALMOST_EMPTY_MASK) + ((rx_fifo_empty<<UART_INTR_EVENT_RX_FIFO_EMPTY_OFS)&UART_INTR_EVENT_RX_FIFO_EMPTY_MASK) + ((rcv_negedge<<UART_INTR_EVENT_RCV_NEGEDGE_OFS)&UART_INTR_EVENT_RCV_NEGEDGE_MASK) + ((rcv_posedge<<UART_INTR_EVENT_RCV_POSEDGE_OFS)&UART_INTR_EVENT_RCV_POSEDGE_MASK) + ((rx_int<<UART_INTR_EVENT_RX_INT_OFS)&UART_INTR_EVENT_RX_INT_MASK) + ((tx_int<<UART_INTR_EVENT_TX_INT_OFS)&UART_INTR_EVENT_TX_INT_MASK) + ((cts_int<<UART_INTR_EVENT_CTS_INT_OFS)&UART_INTR_EVENT_CTS_INT_MASK) + ((addr_match<<UART_INTR_EVENT_ADDR_MATCH_OFS)&UART_INTR_EVENT_ADDR_MATCH_MASK) + ((baud_err<<UART_INTR_EVENT_BAUD_ERR_OFS)&UART_INTR_EVENT_BAUD_ERR_MASK) + ((eot<<UART_INTR_EVENT_EOT_OFS)&UART_INTR_EVENT_EOT_MASK) + ((dma_done_tx_intr<<UART_INTR_EVENT_DMA_DONE_TX_INTR_OFS)&UART_INTR_EVENT_DMA_DONE_TX_INTR_MASK) + ((dma_done_rx_intr<<UART_INTR_EVENT_DMA_DONE_RX_INTR_OFS)&UART_INTR_EVENT_DMA_DONE_RX_INTR_MASK);
}

static inline void UART_INTR_EN1_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout_en, uint32_t frame_err_en, uint32_t parity_err_en, uint32_t underflow_err_en, uint32_t overflow_err_en, uint32_t maj_vote_err_en, uint32_t tx_fifo_almost_full_en, uint32_t tx_fifo_full_en, uint32_t tx_fifo_almost_empty_en, uint32_t tx_fifo_empty_en, uint32_t rx_fifo_almost_full_en, uint32_t rx_fifo_full_en, uint32_t rx_fifo_almost_empty_en, uint32_t rx_fifo_empty_en, uint32_t rcv_negedge_en, uint32_t rcv_posedge_en) {
    registers->INTR_EN1.packed_w =  + ((rcv_timeout_en<<UART_INTR_EN1_RCV_TIMEOUT_EN_OFS)&UART_INTR_EN1_RCV_TIMEOUT_EN_MASK) + ((frame_err_en<<UART_INTR_EN1_FRAME_ERR_EN_OFS)&UART_INTR_EN1_FRAME_ERR_EN_MASK) + ((parity_err_en<<UART_INTR_EN1_PARITY_ERR_EN_OFS)&UART_INTR_EN1_PARITY_ERR_EN_MASK) + ((underflow_err_en<<UART_INTR_EN1_UNDERFLOW_ERR_EN_OFS)&UART_INTR_EN1_UNDERFLOW_ERR_EN_MASK) + ((overflow_err_en<<UART_INTR_EN1_OVERFLOW_ERR_EN_OFS)&UART_INTR_EN1_OVERFLOW_ERR_EN_MASK) + ((maj_vote_err_en<<UART_INTR_EN1_MAJ_VOTE_ERR_EN_OFS)&UART_INTR_EN1_MAJ_VOTE_ERR_EN_MASK) + ((tx_fifo_almost_full_en<<UART_INTR_EN1_TX_FIFO_ALMOST_FULL_EN_OFS)&UART_INTR_EN1_TX_FIFO_ALMOST_FULL_EN_MASK) + ((tx_fifo_full_en<<UART_INTR_EN1_TX_FIFO_FULL_EN_OFS)&UART_INTR_EN1_TX_FIFO_FULL_EN_MASK) + ((tx_fifo_almost_empty_en<<UART_INTR_EN1_TX_FIFO_ALMOST_EMPTY_EN_OFS)&UART_INTR_EN1_TX_FIFO_ALMOST_EMPTY_EN_MASK) + ((tx_fifo_empty_en<<UART_INTR_EN1_TX_FIFO_EMPTY_EN_OFS)&UART_INTR_EN1_TX_FIFO_EMPTY_EN_MASK) + ((rx_fifo_almost_full_en<<UART_INTR_EN1_RX_FIFO_ALMOST_FULL_EN_OFS)&UART_INTR_EN1_RX_FIFO_ALMOST_FULL_EN_MASK) + ((rx_fifo_full_en<<UART_INTR_EN1_RX_FIFO_FULL_EN_OFS)&UART_INTR_EN1_RX_FIFO_FULL_EN_MASK) + ((rx_fifo_almost_empty_en<<UART_INTR_EN1_RX_FIFO_ALMOST_EMPTY_EN_OFS)&UART_INTR_EN1_RX_FIFO_ALMOST_EMPTY_EN_MASK) + ((rx_fifo_empty_en<<UART_INTR_EN1_RX_FIFO_EMPTY_EN_OFS)&UART_INTR_EN1_RX_FIFO_EMPTY_EN_MASK) + ((rcv_negedge_en<<UART_INTR_EN1_RCV_NEGEDGE_EN_OFS)&UART_INTR_EN1_RCV_NEGEDGE_EN_MASK) + ((rcv_posedge_en<<UART_INTR_EN1_RCV_POSEDGE_EN_OFS)&UART_INTR_EN1_RCV_POSEDGE_EN_MASK);
}

static inline void UART_INTR_EN2_WRITE(UART_REGS_s * registers, uint32_t rx_int_en, uint32_t tx_int_en, uint32_t cts_int_en, uint32_t addr_match_en, uint32_t baud_err_en, uint32_t eot_en, uint32_t dma_done_tx_intr_en, uint32_t dma_done_rx_intr_en) {
    registers->INTR_EN2.packed_w =  + ((rx_int_en<<UART_INTR_EN2_RX_INT_EN_OFS)&UART_INTR_EN2_RX_INT_EN_MASK) + ((tx_int_en<<UART_INTR_EN2_TX_INT_EN_OFS)&UART_INTR_EN2_TX_INT_EN_MASK) + ((cts_int_en<<UART_INTR_EN2_CTS_INT_EN_OFS)&UART_INTR_EN2_CTS_INT_EN_MASK) + ((addr_match_en<<UART_INTR_EN2_ADDR_MATCH_EN_OFS)&UART_INTR_EN2_ADDR_MATCH_EN_MASK) + ((baud_err_en<<UART_INTR_EN2_BAUD_ERR_EN_OFS)&UART_INTR_EN2_BAUD_ERR_EN_MASK) + ((eot_en<<UART_INTR_EN2_EOT_EN_OFS)&UART_INTR_EN2_EOT_EN_MASK) + ((dma_done_tx_intr_en<<UART_INTR_EN2_DMA_DONE_TX_INTR_EN_OFS)&UART_INTR_EN2_DMA_DONE_TX_INTR_EN_MASK) + ((dma_done_rx_intr_en<<UART_INTR_EN2_DMA_DONE_RX_INTR_EN_OFS)&UART_INTR_EN2_DMA_DONE_RX_INTR_EN_MASK);
}

static inline void UART_INTR_NMI_EN1_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout_nmi_en, uint32_t frame_err_nmi_en, uint32_t parity_err_nmi_en, uint32_t underflow_err_nmi_en, uint32_t overflow_err_nmi_en, uint32_t maj_vote_err_nmi_en, uint32_t tx_fifo_almost_full_nmi_en, uint32_t tx_fifo_full_nmi_en, uint32_t tx_fifo_almost_empty_nmi_en, uint32_t tx_fifo_empty_nmi_en, uint32_t rx_fifo_almost_full_nmi_en, uint32_t rx_fifo_full_nmi_en, uint32_t rx_fifo_almost_empty_nmi_en, uint32_t rx_fifo_empty_nmi_en, uint32_t rcv_negedge_nmi_en, uint32_t rcv_posedge_nmi_en) {
    registers->INTR_NMI_EN1.packed_w =  + ((rcv_timeout_nmi_en<<UART_INTR_NMI_EN1_RCV_TIMEOUT_NMI_EN_OFS)&UART_INTR_NMI_EN1_RCV_TIMEOUT_NMI_EN_MASK) + ((frame_err_nmi_en<<UART_INTR_NMI_EN1_FRAME_ERR_NMI_EN_OFS)&UART_INTR_NMI_EN1_FRAME_ERR_NMI_EN_MASK) + ((parity_err_nmi_en<<UART_INTR_NMI_EN1_PARITY_ERR_NMI_EN_OFS)&UART_INTR_NMI_EN1_PARITY_ERR_NMI_EN_MASK) + ((underflow_err_nmi_en<<UART_INTR_NMI_EN1_UNDERFLOW_ERR_NMI_EN_OFS)&UART_INTR_NMI_EN1_UNDERFLOW_ERR_NMI_EN_MASK) + ((overflow_err_nmi_en<<UART_INTR_NMI_EN1_OVERFLOW_ERR_NMI_EN_OFS)&UART_INTR_NMI_EN1_OVERFLOW_ERR_NMI_EN_MASK) + ((maj_vote_err_nmi_en<<UART_INTR_NMI_EN1_MAJ_VOTE_ERR_NMI_EN_OFS)&UART_INTR_NMI_EN1_MAJ_VOTE_ERR_NMI_EN_MASK) + ((tx_fifo_almost_full_nmi_en<<UART_INTR_NMI_EN1_TX_FIFO_ALMOST_FULL_NMI_EN_OFS)&UART_INTR_NMI_EN1_TX_FIFO_ALMOST_FULL_NMI_EN_MASK) + ((tx_fifo_full_nmi_en<<UART_INTR_NMI_EN1_TX_FIFO_FULL_NMI_EN_OFS)&UART_INTR_NMI_EN1_TX_FIFO_FULL_NMI_EN_MASK) + ((tx_fifo_almost_empty_nmi_en<<UART_INTR_NMI_EN1_TX_FIFO_ALMOST_EMPTY_NMI_EN_OFS)&UART_INTR_NMI_EN1_TX_FIFO_ALMOST_EMPTY_NMI_EN_MASK) + ((tx_fifo_empty_nmi_en<<UART_INTR_NMI_EN1_TX_FIFO_EMPTY_NMI_EN_OFS)&UART_INTR_NMI_EN1_TX_FIFO_EMPTY_NMI_EN_MASK) + ((rx_fifo_almost_full_nmi_en<<UART_INTR_NMI_EN1_RX_FIFO_ALMOST_FULL_NMI_EN_OFS)&UART_INTR_NMI_EN1_RX_FIFO_ALMOST_FULL_NMI_EN_MASK) + ((rx_fifo_full_nmi_en<<UART_INTR_NMI_EN1_RX_FIFO_FULL_NMI_EN_OFS)&UART_INTR_NMI_EN1_RX_FIFO_FULL_NMI_EN_MASK) + ((rx_fifo_almost_empty_nmi_en<<UART_INTR_NMI_EN1_RX_FIFO_ALMOST_EMPTY_NMI_EN_OFS)&UART_INTR_NMI_EN1_RX_FIFO_ALMOST_EMPTY_NMI_EN_MASK) + ((rx_fifo_empty_nmi_en<<UART_INTR_NMI_EN1_RX_FIFO_EMPTY_NMI_EN_OFS)&UART_INTR_NMI_EN1_RX_FIFO_EMPTY_NMI_EN_MASK) + ((rcv_negedge_nmi_en<<UART_INTR_NMI_EN1_RCV_NEGEDGE_NMI_EN_OFS)&UART_INTR_NMI_EN1_RCV_NEGEDGE_NMI_EN_MASK) + ((rcv_posedge_nmi_en<<UART_INTR_NMI_EN1_RCV_POSEDGE_NMI_EN_OFS)&UART_INTR_NMI_EN1_RCV_POSEDGE_NMI_EN_MASK);
}

static inline void UART_INTR_NMI_EN2_WRITE(UART_REGS_s * registers, uint32_t rx_int_nmi_en, uint32_t tx_int_nmi_en, uint32_t cts_int_nmi_en, uint32_t addr_match_nmi_en, uint32_t baud_err_nmi_en, uint32_t eot_nmi_en, uint32_t dma_done_tx_intr_nmi_en, uint32_t dma_done_rx_intr_nmi_en) {
    registers->INTR_NMI_EN2.packed_w =  + ((rx_int_nmi_en<<UART_INTR_NMI_EN2_RX_INT_NMI_EN_OFS)&UART_INTR_NMI_EN2_RX_INT_NMI_EN_MASK) + ((tx_int_nmi_en<<UART_INTR_NMI_EN2_TX_INT_NMI_EN_OFS)&UART_INTR_NMI_EN2_TX_INT_NMI_EN_MASK) + ((cts_int_nmi_en<<UART_INTR_NMI_EN2_CTS_INT_NMI_EN_OFS)&UART_INTR_NMI_EN2_CTS_INT_NMI_EN_MASK) + ((addr_match_nmi_en<<UART_INTR_NMI_EN2_ADDR_MATCH_NMI_EN_OFS)&UART_INTR_NMI_EN2_ADDR_MATCH_NMI_EN_MASK) + ((baud_err_nmi_en<<UART_INTR_NMI_EN2_BAUD_ERR_NMI_EN_OFS)&UART_INTR_NMI_EN2_BAUD_ERR_NMI_EN_MASK) + ((eot_nmi_en<<UART_INTR_NMI_EN2_EOT_NMI_EN_OFS)&UART_INTR_NMI_EN2_EOT_NMI_EN_MASK) + ((dma_done_tx_intr_nmi_en<<UART_INTR_NMI_EN2_DMA_DONE_TX_INTR_NMI_EN_OFS)&UART_INTR_NMI_EN2_DMA_DONE_TX_INTR_NMI_EN_MASK) + ((dma_done_rx_intr_nmi_en<<UART_INTR_NMI_EN2_DMA_DONE_RX_INTR_NMI_EN_OFS)&UART_INTR_NMI_EN2_DMA_DONE_RX_INTR_NMI_EN_MASK);
}

static inline void UART_INTR_SW_SET_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout_sw_set, uint32_t frame_err_sw_set, uint32_t parity_err_sw_set, uint32_t underflow_err_sw_set, uint32_t overflow_err_sw_set, uint32_t maj_vote_err_sw_set, uint32_t tx_fifo_almost_full_sw_set, uint32_t tx_fifo_full_sw_set, uint32_t tx_fifo_almost_empty_sw_set, uint32_t tx_fifo_empty_sw_set, uint32_t rx_fifo_almost_full_sw_set, uint32_t rx_fifo_full_sw_set, uint32_t rx_fifo_almost_empty_sw_set, uint32_t rx_fifo_empty_sw_set, uint32_t rcv_negedge_sw_set, uint32_t rcv_posedge_sw_set, uint32_t rx_int_sw_set, uint32_t tx_int_sw_set, uint32_t cts_int_sw_set, uint32_t addr_match_sw_set, uint32_t baud_err_sw_set, uint32_t eot_sw_set, uint32_t dma_done_tx_intr_sw_set, uint32_t dma_done_rx_intr_sw_set) {
    registers->INTR_SW_SET.packed_w =  + ((rcv_timeout_sw_set<<UART_INTR_SW_SET_RCV_TIMEOUT_SW_SET_OFS)&UART_INTR_SW_SET_RCV_TIMEOUT_SW_SET_MASK) + ((frame_err_sw_set<<UART_INTR_SW_SET_FRAME_ERR_SW_SET_OFS)&UART_INTR_SW_SET_FRAME_ERR_SW_SET_MASK) + ((parity_err_sw_set<<UART_INTR_SW_SET_PARITY_ERR_SW_SET_OFS)&UART_INTR_SW_SET_PARITY_ERR_SW_SET_MASK) + ((underflow_err_sw_set<<UART_INTR_SW_SET_UNDERFLOW_ERR_SW_SET_OFS)&UART_INTR_SW_SET_UNDERFLOW_ERR_SW_SET_MASK) + ((overflow_err_sw_set<<UART_INTR_SW_SET_OVERFLOW_ERR_SW_SET_OFS)&UART_INTR_SW_SET_OVERFLOW_ERR_SW_SET_MASK) + ((maj_vote_err_sw_set<<UART_INTR_SW_SET_MAJ_VOTE_ERR_SW_SET_OFS)&UART_INTR_SW_SET_MAJ_VOTE_ERR_SW_SET_MASK) + ((tx_fifo_almost_full_sw_set<<UART_INTR_SW_SET_TX_FIFO_ALMOST_FULL_SW_SET_OFS)&UART_INTR_SW_SET_TX_FIFO_ALMOST_FULL_SW_SET_MASK) + ((tx_fifo_full_sw_set<<UART_INTR_SW_SET_TX_FIFO_FULL_SW_SET_OFS)&UART_INTR_SW_SET_TX_FIFO_FULL_SW_SET_MASK) + ((tx_fifo_almost_empty_sw_set<<UART_INTR_SW_SET_TX_FIFO_ALMOST_EMPTY_SW_SET_OFS)&UART_INTR_SW_SET_TX_FIFO_ALMOST_EMPTY_SW_SET_MASK) + ((tx_fifo_empty_sw_set<<UART_INTR_SW_SET_TX_FIFO_EMPTY_SW_SET_OFS)&UART_INTR_SW_SET_TX_FIFO_EMPTY_SW_SET_MASK) + ((rx_fifo_almost_full_sw_set<<UART_INTR_SW_SET_RX_FIFO_ALMOST_FULL_SW_SET_OFS)&UART_INTR_SW_SET_RX_FIFO_ALMOST_FULL_SW_SET_MASK) + ((rx_fifo_full_sw_set<<UART_INTR_SW_SET_RX_FIFO_FULL_SW_SET_OFS)&UART_INTR_SW_SET_RX_FIFO_FULL_SW_SET_MASK) + ((rx_fifo_almost_empty_sw_set<<UART_INTR_SW_SET_RX_FIFO_ALMOST_EMPTY_SW_SET_OFS)&UART_INTR_SW_SET_RX_FIFO_ALMOST_EMPTY_SW_SET_MASK) + ((rx_fifo_empty_sw_set<<UART_INTR_SW_SET_RX_FIFO_EMPTY_SW_SET_OFS)&UART_INTR_SW_SET_RX_FIFO_EMPTY_SW_SET_MASK) + ((rcv_negedge_sw_set<<UART_INTR_SW_SET_RCV_NEGEDGE_SW_SET_OFS)&UART_INTR_SW_SET_RCV_NEGEDGE_SW_SET_MASK) + ((rcv_posedge_sw_set<<UART_INTR_SW_SET_RCV_POSEDGE_SW_SET_OFS)&UART_INTR_SW_SET_RCV_POSEDGE_SW_SET_MASK) + ((rx_int_sw_set<<UART_INTR_SW_SET_RX_INT_SW_SET_OFS)&UART_INTR_SW_SET_RX_INT_SW_SET_MASK) + ((tx_int_sw_set<<UART_INTR_SW_SET_TX_INT_SW_SET_OFS)&UART_INTR_SW_SET_TX_INT_SW_SET_MASK) + ((cts_int_sw_set<<UART_INTR_SW_SET_CTS_INT_SW_SET_OFS)&UART_INTR_SW_SET_CTS_INT_SW_SET_MASK) + ((addr_match_sw_set<<UART_INTR_SW_SET_ADDR_MATCH_SW_SET_OFS)&UART_INTR_SW_SET_ADDR_MATCH_SW_SET_MASK) + ((baud_err_sw_set<<UART_INTR_SW_SET_BAUD_ERR_SW_SET_OFS)&UART_INTR_SW_SET_BAUD_ERR_SW_SET_MASK) + ((eot_sw_set<<UART_INTR_SW_SET_EOT_SW_SET_OFS)&UART_INTR_SW_SET_EOT_SW_SET_MASK) + ((dma_done_tx_intr_sw_set<<UART_INTR_SW_SET_DMA_DONE_TX_INTR_SW_SET_OFS)&UART_INTR_SW_SET_DMA_DONE_TX_INTR_SW_SET_MASK) + ((dma_done_rx_intr_sw_set<<UART_INTR_SW_SET_DMA_DONE_RX_INTR_SW_SET_OFS)&UART_INTR_SW_SET_DMA_DONE_RX_INTR_SW_SET_MASK);
}

static inline void UART_DMA_RX_INTR_EN1_WRITE(UART_REGS_s * registers, uint32_t dma_rx_rcv_timeout_en, uint32_t dma_rx_frame_err_en, uint32_t dma_rx_parity_err_en, uint32_t dma_rx_underflow_err_en, uint32_t dma_rx_overflow_err_en, uint32_t dma_rx_maj_vote_err_en, uint32_t dma_rx_tx_fifo_almost_full_en, uint32_t dma_rx_tx_fifo_full_en, uint32_t dma_rx_tx_fifo_almost_empty_en, uint32_t dma_rx_tx_fifo_empty_en, uint32_t dma_rx_rx_fifo_almost_full_en, uint32_t dma_rx_rx_fifo_full_en, uint32_t dma_rx_rx_fifo_almost_empty_en, uint32_t dma_rx_rx_fifo_empty_en, uint32_t dma_rx_rcv_negedge_en, uint32_t dma_rx_rcv_posedge_en) {
    registers->DMA_RX_INTR_EN1.packed_w =  + ((dma_rx_rcv_timeout_en<<UART_DMA_RX_INTR_EN1_DMA_RX_RCV_TIMEOUT_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_RCV_TIMEOUT_EN_MASK) + ((dma_rx_frame_err_en<<UART_DMA_RX_INTR_EN1_DMA_RX_FRAME_ERR_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_FRAME_ERR_EN_MASK) + ((dma_rx_parity_err_en<<UART_DMA_RX_INTR_EN1_DMA_RX_PARITY_ERR_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_PARITY_ERR_EN_MASK) + ((dma_rx_underflow_err_en<<UART_DMA_RX_INTR_EN1_DMA_RX_UNDERFLOW_ERR_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_UNDERFLOW_ERR_EN_MASK) + ((dma_rx_overflow_err_en<<UART_DMA_RX_INTR_EN1_DMA_RX_OVERFLOW_ERR_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_OVERFLOW_ERR_EN_MASK) + ((dma_rx_maj_vote_err_en<<UART_DMA_RX_INTR_EN1_DMA_RX_MAJ_VOTE_ERR_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_MAJ_VOTE_ERR_EN_MASK) + ((dma_rx_tx_fifo_almost_full_en<<UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_ALMOST_FULL_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_ALMOST_FULL_EN_MASK) + ((dma_rx_tx_fifo_full_en<<UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_FULL_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_FULL_EN_MASK) + ((dma_rx_tx_fifo_almost_empty_en<<UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_ALMOST_EMPTY_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_ALMOST_EMPTY_EN_MASK) + ((dma_rx_tx_fifo_empty_en<<UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_EMPTY_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_TX_FIFO_EMPTY_EN_MASK) + ((dma_rx_rx_fifo_almost_full_en<<UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_ALMOST_FULL_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_ALMOST_FULL_EN_MASK) + ((dma_rx_rx_fifo_full_en<<UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_FULL_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_FULL_EN_MASK) + ((dma_rx_rx_fifo_almost_empty_en<<UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_ALMOST_EMPTY_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_ALMOST_EMPTY_EN_MASK) + ((dma_rx_rx_fifo_empty_en<<UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_EMPTY_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_RX_FIFO_EMPTY_EN_MASK) + ((dma_rx_rcv_negedge_en<<UART_DMA_RX_INTR_EN1_DMA_RX_RCV_NEGEDGE_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_RCV_NEGEDGE_EN_MASK) + ((dma_rx_rcv_posedge_en<<UART_DMA_RX_INTR_EN1_DMA_RX_RCV_POSEDGE_EN_OFS)&UART_DMA_RX_INTR_EN1_DMA_RX_RCV_POSEDGE_EN_MASK);
}

static inline void UART_DMA_RX_INTR_EN2_WRITE(UART_REGS_s * registers, uint32_t dma_rx_rx_int_en, uint32_t dma_rx_tx_int_en, uint32_t dma_rx_cts_int_en, uint32_t dma_rx_addr_match_en, uint32_t dma_rx_baud_err_en, uint32_t dma_rx_eot_en, uint32_t dma_rx_dma_done_tx_intr_en, uint32_t dma_rx_dma_done_rx_intr_en) {
    registers->DMA_RX_INTR_EN2.packed_w =  + ((dma_rx_rx_int_en<<UART_DMA_RX_INTR_EN2_DMA_RX_RX_INT_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_RX_INT_EN_MASK) + ((dma_rx_tx_int_en<<UART_DMA_RX_INTR_EN2_DMA_RX_TX_INT_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_TX_INT_EN_MASK) + ((dma_rx_cts_int_en<<UART_DMA_RX_INTR_EN2_DMA_RX_CTS_INT_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_CTS_INT_EN_MASK) + ((dma_rx_addr_match_en<<UART_DMA_RX_INTR_EN2_DMA_RX_ADDR_MATCH_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_ADDR_MATCH_EN_MASK) + ((dma_rx_baud_err_en<<UART_DMA_RX_INTR_EN2_DMA_RX_BAUD_ERR_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_BAUD_ERR_EN_MASK) + ((dma_rx_eot_en<<UART_DMA_RX_INTR_EN2_DMA_RX_EOT_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_EOT_EN_MASK) + ((dma_rx_dma_done_tx_intr_en<<UART_DMA_RX_INTR_EN2_DMA_RX_DMA_DONE_TX_INTR_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_DMA_DONE_TX_INTR_EN_MASK) + ((dma_rx_dma_done_rx_intr_en<<UART_DMA_RX_INTR_EN2_DMA_RX_DMA_DONE_RX_INTR_EN_OFS)&UART_DMA_RX_INTR_EN2_DMA_RX_DMA_DONE_RX_INTR_EN_MASK);
}

static inline void UART_DMA_TX_INTR_EN1_WRITE(UART_REGS_s * registers, uint32_t dma_tx_rcv_timeout_en, uint32_t dma_tx_frame_err_en, uint32_t dma_tx_parity_err_en, uint32_t dma_tx_underflow_err_en, uint32_t dma_tx_overflow_err_en, uint32_t dma_tx_maj_vote_err_en, uint32_t dma_tx_tx_fifo_almost_full_en, uint32_t dma_tx_tx_fifo_full_en, uint32_t dma_tx_tx_fifo_almost_empty_en, uint32_t dma_tx_tx_fifo_empty_en, uint32_t dma_tx_rx_fifo_almost_full_en, uint32_t dma_tx_rx_fifo_full_en, uint32_t dma_tx_rx_fifo_almost_empty_en, uint32_t dma_tx_rx_fifo_empty_en, uint32_t dma_tx_rcv_negedge_en, uint32_t dma_tx_rcv_posedge_en) {
    registers->DMA_TX_INTR_EN1.packed_w =  + ((dma_tx_rcv_timeout_en<<UART_DMA_TX_INTR_EN1_DMA_TX_RCV_TIMEOUT_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_RCV_TIMEOUT_EN_MASK) + ((dma_tx_frame_err_en<<UART_DMA_TX_INTR_EN1_DMA_TX_FRAME_ERR_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_FRAME_ERR_EN_MASK) + ((dma_tx_parity_err_en<<UART_DMA_TX_INTR_EN1_DMA_TX_PARITY_ERR_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_PARITY_ERR_EN_MASK) + ((dma_tx_underflow_err_en<<UART_DMA_TX_INTR_EN1_DMA_TX_UNDERFLOW_ERR_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_UNDERFLOW_ERR_EN_MASK) + ((dma_tx_overflow_err_en<<UART_DMA_TX_INTR_EN1_DMA_TX_OVERFLOW_ERR_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_OVERFLOW_ERR_EN_MASK) + ((dma_tx_maj_vote_err_en<<UART_DMA_TX_INTR_EN1_DMA_TX_MAJ_VOTE_ERR_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_MAJ_VOTE_ERR_EN_MASK) + ((dma_tx_tx_fifo_almost_full_en<<UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_ALMOST_FULL_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_ALMOST_FULL_EN_MASK) + ((dma_tx_tx_fifo_full_en<<UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_FULL_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_FULL_EN_MASK) + ((dma_tx_tx_fifo_almost_empty_en<<UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_ALMOST_EMPTY_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_ALMOST_EMPTY_EN_MASK) + ((dma_tx_tx_fifo_empty_en<<UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_EMPTY_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_TX_FIFO_EMPTY_EN_MASK) + ((dma_tx_rx_fifo_almost_full_en<<UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_ALMOST_FULL_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_ALMOST_FULL_EN_MASK) + ((dma_tx_rx_fifo_full_en<<UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_FULL_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_FULL_EN_MASK) + ((dma_tx_rx_fifo_almost_empty_en<<UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_ALMOST_EMPTY_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_ALMOST_EMPTY_EN_MASK) + ((dma_tx_rx_fifo_empty_en<<UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_EMPTY_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_RX_FIFO_EMPTY_EN_MASK) + ((dma_tx_rcv_negedge_en<<UART_DMA_TX_INTR_EN1_DMA_TX_RCV_NEGEDGE_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_RCV_NEGEDGE_EN_MASK) + ((dma_tx_rcv_posedge_en<<UART_DMA_TX_INTR_EN1_DMA_TX_RCV_POSEDGE_EN_OFS)&UART_DMA_TX_INTR_EN1_DMA_TX_RCV_POSEDGE_EN_MASK);
}

static inline void UART_DMA_TX_INTR_EN2_WRITE(UART_REGS_s * registers, uint32_t dma_tx_rx_int_en, uint32_t dma_tx_tx_int_en, uint32_t dma_tx_cts_int_en, uint32_t dma_tx_addr_match_en, uint32_t dma_tx_baud_err_en, uint32_t dma_tx_eot_en, uint32_t dma_tx_dma_done_tx_intr_en, uint32_t dma_tx_dma_done_rx_intr_en) {
    registers->DMA_TX_INTR_EN2.packed_w =  + ((dma_tx_rx_int_en<<UART_DMA_TX_INTR_EN2_DMA_TX_RX_INT_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_RX_INT_EN_MASK) + ((dma_tx_tx_int_en<<UART_DMA_TX_INTR_EN2_DMA_TX_TX_INT_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_TX_INT_EN_MASK) + ((dma_tx_cts_int_en<<UART_DMA_TX_INTR_EN2_DMA_TX_CTS_INT_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_CTS_INT_EN_MASK) + ((dma_tx_addr_match_en<<UART_DMA_TX_INTR_EN2_DMA_TX_ADDR_MATCH_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_ADDR_MATCH_EN_MASK) + ((dma_tx_baud_err_en<<UART_DMA_TX_INTR_EN2_DMA_TX_BAUD_ERR_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_BAUD_ERR_EN_MASK) + ((dma_tx_eot_en<<UART_DMA_TX_INTR_EN2_DMA_TX_EOT_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_EOT_EN_MASK) + ((dma_tx_dma_done_tx_intr_en<<UART_DMA_TX_INTR_EN2_DMA_TX_DMA_DONE_TX_INTR_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_DMA_DONE_TX_INTR_EN_MASK) + ((dma_tx_dma_done_rx_intr_en<<UART_DMA_TX_INTR_EN2_DMA_TX_DMA_DONE_RX_INTR_EN_OFS)&UART_DMA_TX_INTR_EN2_DMA_TX_DMA_DONE_RX_INTR_EN_MASK);
}

static inline void UART_INTR_STS_WRITE(UART_REGS_s * registers, uint32_t intr_first) {
    registers->INTR_STS.packed_w =  + ((intr_first<<UART_INTR_STS_INTR_FIRST_OFS)&UART_INTR_STS_INTR_FIRST_MASK);
}

static inline void UART_UART_CLKCFG_WRITE(UART_REGS_s * registers, uint32_t blck_async, uint32_t async_req_en_key) {
    registers->UART_CLKCFG.packed_w =  + ((blck_async<<UART_UART_CLKCFG_BLCK_ASYNC_OFS)&UART_UART_CLKCFG_BLCK_ASYNC_MASK) + ((async_req_en_key<<UART_UART_CLKCFG_ASYNC_REQ_EN_KEY_OFS)&UART_UART_CLKCFG_ASYNC_REQ_EN_KEY_MASK);
}

static inline void UART_UART_FIFOLS_WRITE(UART_REGS_s * registers, uint32_t tx_fifo_ls, uint32_t rx_to, uint32_t rx_fifo_ls) {
    registers->UART_FIFOLS.packed_w =  + ((tx_fifo_ls<<UART_UART_FIFOLS_TX_FIFO_LS_OFS)&UART_UART_FIFOLS_TX_FIFO_LS_MASK) + ((rx_to<<UART_UART_FIFOLS_RX_TO_OFS)&UART_UART_FIFOLS_RX_TO_MASK) + ((rx_fifo_ls<<UART_UART_FIFOLS_RX_FIFO_LS_OFS)&UART_UART_FIFOLS_RX_FIFO_LS_MASK);
}

static inline void UART_UART_FIFOSTS_WRITE(UART_REGS_s * registers, uint32_t tx_fifo_full_sts, uint32_t tx_fifo_almost_full_sts, uint32_t tx_fifo_empty_sts, uint32_t tx_fifo_almost_empty_sts, uint32_t rx_fifo_full_sts, uint32_t rx_fifo_almost_full_sts, uint32_t rx_fifo_empty_sts, uint32_t rx_fifo_almost_empty_sts) {
    registers->UART_FIFOSTS.packed_w =  + ((tx_fifo_full_sts<<UART_UART_FIFOSTS_TX_FIFO_FULL_STS_OFS)&UART_UART_FIFOSTS_TX_FIFO_FULL_STS_MASK) + ((tx_fifo_almost_full_sts<<UART_UART_FIFOSTS_TX_FIFO_ALMOST_FULL_STS_OFS)&UART_UART_FIFOSTS_TX_FIFO_ALMOST_FULL_STS_MASK) + ((tx_fifo_empty_sts<<UART_UART_FIFOSTS_TX_FIFO_EMPTY_STS_OFS)&UART_UART_FIFOSTS_TX_FIFO_EMPTY_STS_MASK) + ((tx_fifo_almost_empty_sts<<UART_UART_FIFOSTS_TX_FIFO_ALMOST_EMPTY_STS_OFS)&UART_UART_FIFOSTS_TX_FIFO_ALMOST_EMPTY_STS_MASK) + ((rx_fifo_full_sts<<UART_UART_FIFOSTS_RX_FIFO_FULL_STS_OFS)&UART_UART_FIFOSTS_RX_FIFO_FULL_STS_MASK) + ((rx_fifo_almost_full_sts<<UART_UART_FIFOSTS_RX_FIFO_ALMOST_FULL_STS_OFS)&UART_UART_FIFOSTS_RX_FIFO_ALMOST_FULL_STS_MASK) + ((rx_fifo_empty_sts<<UART_UART_FIFOSTS_RX_FIFO_EMPTY_STS_OFS)&UART_UART_FIFOSTS_RX_FIFO_EMPTY_STS_MASK) + ((rx_fifo_almost_empty_sts<<UART_UART_FIFOSTS_RX_FIFO_ALMOST_EMPTY_STS_OFS)&UART_UART_FIFOSTS_RX_FIFO_ALMOST_EMPTY_STS_MASK);
}

static inline void UART_UART_CFG_WRITE(UART_REGS_s * registers, uint32_t wrd_len, uint32_t par_en, uint32_t evn_par, uint32_t stck_par, uint32_t stop_bit, uint32_t send_idle) {
    registers->UART_CFG.packed_w =  + ((wrd_len<<UART_UART_CFG_WRD_LEN_OFS)&UART_UART_CFG_WRD_LEN_MASK) + ((par_en<<UART_UART_CFG_PAR_EN_OFS)&UART_UART_CFG_PAR_EN_MASK) + ((evn_par<<UART_UART_CFG_EVN_PAR_OFS)&UART_UART_CFG_EVN_PAR_MASK) + ((stck_par<<UART_UART_CFG_STCK_PAR_OFS)&UART_UART_CFG_STCK_PAR_MASK) + ((stop_bit<<UART_UART_CFG_STOP_BIT_OFS)&UART_UART_CFG_STOP_BIT_MASK) + ((send_idle<<UART_UART_CFG_SEND_IDLE_OFS)&UART_UART_CFG_SEND_IDLE_MASK);
}

static inline void UART_UART_GFCTL_WRITE(UART_REGS_s * registers, uint32_t gf_width) {
    registers->UART_GFCTL.packed_w =  + ((gf_width<<UART_UART_GFCTL_GF_WIDTH_OFS)&UART_UART_GFCTL_GF_WIDTH_MASK);
}

static inline void UART_UART_TXDATA_N_WRITE(UART_REGS_s * registers, uint32_t index, uint32_t uart_data) {
    registers->UART_TXDATA[index].packed_w =  + ((uart_data<<UART_UART_TXDATA_UART_DATA_OFS)&UART_UART_TXDATA_UART_DATA_MASK);
}

static inline void UART_UART_RXDATA_N_WRITE(UART_REGS_s * registers, uint32_t index, uint32_t uart_result) {
    registers->UART_RXDATA[index].packed_w =  + ((uart_result<<UART_UART_RXDATA_UART_RESULT_OFS)&UART_UART_RXDATA_UART_RESULT_MASK);
}

static inline void UART_UART_BRDNUM_WRITE(UART_REGS_s * registers, uint32_t num_m) {
    registers->UART_BRDNUM.packed_w =  + ((num_m<<UART_UART_BRDNUM_NUM_M_OFS)&UART_UART_BRDNUM_NUM_M_MASK);
}

static inline void UART_UART_BRDDEN_WRITE(UART_REGS_s * registers, uint32_t den_n) {
    registers->UART_BRDDEN.packed_w =  + ((den_n<<UART_UART_BRDDEN_DEN_N_OFS)&UART_UART_BRDDEN_DEN_N_MASK);
}

static inline void UART_UART_CTRL_WRITE(UART_REGS_s * registers, uint32_t uart_en, uint32_t uart_msb, uint32_t majvote_en, uint32_t fifo_en, uint32_t os, uint32_t loopback_en, uint32_t mode, uint32_t tx_en, uint32_t rx_en, uint32_t tx_out_en, uint32_t tx_out_ctrl, uint32_t cts_en, uint32_t rts_en, uint32_t rts_val) {
    registers->UART_CTRL.packed_w =  + ((uart_en<<UART_UART_CTRL_UART_EN_OFS)&UART_UART_CTRL_UART_EN_MASK) + ((uart_msb<<UART_UART_CTRL_UART_MSB_OFS)&UART_UART_CTRL_UART_MSB_MASK) + ((majvote_en<<UART_UART_CTRL_MAJVOTE_EN_OFS)&UART_UART_CTRL_MAJVOTE_EN_MASK) + ((fifo_en<<UART_UART_CTRL_FIFO_EN_OFS)&UART_UART_CTRL_FIFO_EN_MASK) + ((os<<UART_UART_CTRL_OS_OFS)&UART_UART_CTRL_OS_MASK) + ((loopback_en<<UART_UART_CTRL_LOOPBACK_EN_OFS)&UART_UART_CTRL_LOOPBACK_EN_MASK) + ((mode<<UART_UART_CTRL_MODE_OFS)&UART_UART_CTRL_MODE_MASK) + ((tx_en<<UART_UART_CTRL_TX_EN_OFS)&UART_UART_CTRL_TX_EN_MASK) + ((rx_en<<UART_UART_CTRL_RX_EN_OFS)&UART_UART_CTRL_RX_EN_MASK) + ((tx_out_en<<UART_UART_CTRL_TX_OUT_EN_OFS)&UART_UART_CTRL_TX_OUT_EN_MASK) + ((tx_out_ctrl<<UART_UART_CTRL_TX_OUT_CTRL_OFS)&UART_UART_CTRL_TX_OUT_CTRL_MASK) + ((cts_en<<UART_UART_CTRL_CTS_EN_OFS)&UART_UART_CTRL_CTS_EN_MASK) + ((rts_en<<UART_UART_CTRL_RTS_EN_OFS)&UART_UART_CTRL_RTS_EN_MASK) + ((rts_val<<UART_UART_CTRL_RTS_VAL_OFS)&UART_UART_CTRL_RTS_VAL_MASK);
}

static inline void UART_UART_ADDR_WRITE(UART_REGS_s * registers, uint32_t uart_addr) {
    registers->UART_ADDR.packed_w =  + ((uart_addr<<UART_UART_ADDR_UART_ADDR_OFS)&UART_UART_ADDR_UART_ADDR_MASK);
}

static inline void UART_UART_ADDRMASK_WRITE(UART_REGS_s * registers, uint32_t addr_mask) {
    registers->UART_ADDRMASK.packed_w =  + ((addr_mask<<UART_UART_ADDRMASK_ADDR_MASK_OFS)&UART_UART_ADDRMASK_ADDR_MASK_MASK);
}

static inline void UART_STS_WRITE(UART_REGS_s * registers, uint32_t cts_sts, uint32_t busy, uint32_t idle) {
    registers->STS.packed_w =  + ((cts_sts<<UART_STS_CTS_STS_OFS)&UART_STS_CTS_STS_MASK) + ((busy<<UART_STS_BUSY_OFS)&UART_STS_BUSY_MASK) + ((idle<<UART_STS_IDLE_OFS)&UART_STS_IDLE_MASK);
}

static inline void UART_FSM_STS_WRITE(UART_REGS_s * registers, uint32_t tx_state, uint32_t rx_state) {
    registers->FSM_STS.packed_w =  + ((tx_state<<UART_FSM_STS_TX_STATE_OFS)&UART_FSM_STS_TX_STATE_MASK) + ((rx_state<<UART_FSM_STS_RX_STATE_OFS)&UART_FSM_STS_RX_STATE_MASK);
}

