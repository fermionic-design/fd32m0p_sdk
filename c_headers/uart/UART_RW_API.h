#include "UART_REGS.h"

static inline void UART_DESC_WRITE(UART_REGS_s * registers, uint32_t module_type, uint32_t module_subtype, uint32_t major_rev, uint32_t minor_rev) {
    registers->DESC.packed_w =  + ((module_type<<UART_DESC_module_type_OFS)&UART_DESC_module_type_MASK) + ((module_subtype<<UART_DESC_module_subtype_OFS)&UART_DESC_module_subtype_MASK) + ((major_rev<<UART_DESC_major_rev_OFS)&UART_DESC_major_rev_MASK) + ((minor_rev<<UART_DESC_minor_rev_OFS)&UART_DESC_minor_rev_MASK);
}

static inline void UART_PWR_EN_WRITE(UART_REGS_s * registers, uint32_t pwr_en, uint32_t pwr_en_key) {
    registers->PWR_EN.packed_w =  + ((pwr_en<<UART_PWR_EN_pwr_en_OFS)&UART_PWR_EN_pwr_en_MASK) + ((pwr_en_key<<UART_PWR_EN_pwr_en_key_OFS)&UART_PWR_EN_pwr_en_key_MASK);
}

static inline void UART_RST_CTRL_WRITE(UART_REGS_s * registers, uint32_t rst, uint32_t rst_sts_clr, uint32_t rst_key) {
    registers->RST_CTRL.packed_w =  + ((rst<<UART_RST_CTRL_rst_OFS)&UART_RST_CTRL_rst_MASK) + ((rst_sts_clr<<UART_RST_CTRL_rst_sts_clr_OFS)&UART_RST_CTRL_rst_sts_clr_MASK) + ((rst_key<<UART_RST_CTRL_rst_key_OFS)&UART_RST_CTRL_rst_key_MASK);
}

static inline void UART_RST_STS_WRITE(UART_REGS_s * registers, uint32_t rst_sts) {
    registers->RST_STS.packed_w =  + ((rst_sts<<UART_RST_STS_rst_sts_OFS)&UART_RST_STS_rst_sts_MASK);
}

static inline void UART_CLK_CTRL_WRITE(UART_REGS_s * registers, uint32_t clk_en) {
    registers->CLK_CTRL.packed_w =  + ((clk_en<<UART_CLK_CTRL_clk_en_OFS)&UART_CLK_CTRL_clk_en_MASK);
}

static inline void UART_CLK_SEL_WRITE(UART_REGS_s * registers, uint32_t clk_sel) {
    registers->CLK_SEL.packed_w =  + ((clk_sel<<UART_CLK_SEL_clk_sel_OFS)&UART_CLK_SEL_clk_sel_MASK);
}

static inline void UART_CLK_DIV_WRITE(UART_REGS_s * registers, uint32_t clk_div) {
    registers->CLK_DIV.packed_w =  + ((clk_div<<UART_CLK_DIV_clk_div_OFS)&UART_CLK_DIV_clk_div_MASK);
}

static inline void UART_DBG_CTRL_WRITE(UART_REGS_s * registers, uint32_t run_on_halt, uint32_t soft_stop) {
    registers->DBG_CTRL.packed_w =  + ((run_on_halt<<UART_DBG_CTRL_run_on_halt_OFS)&UART_DBG_CTRL_run_on_halt_MASK) + ((soft_stop<<UART_DBG_CTRL_soft_stop_OFS)&UART_DBG_CTRL_soft_stop_MASK);
}

static inline void UART_INTR_EVENT_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout, uint32_t frame_err, uint32_t parity_err, uint32_t underflow_err, uint32_t overflow_err, uint32_t maj_vote_err, uint32_t tx_fifo_almost_full, uint32_t tx_fifo_full, uint32_t tx_fifo_almost_empty, uint32_t tx_fifo_empty, uint32_t rx_fifo_almost_full, uint32_t rx_fifo_full, uint32_t rx_fifo_almost_empty, uint32_t rx_fifo_empty, uint32_t rcv_negedge, uint32_t rcv_posedge, uint32_t rx_int, uint32_t tx_int, uint32_t cts_int, uint32_t addr_match, uint32_t baud_err, uint32_t eot, uint32_t dma_done_tx_intr, uint32_t dma_done_rx_intr) {
    registers->INTR_EVENT.packed_w =  + ((rcv_timeout<<UART_INTR_EVENT_rcv_timeout_OFS)&UART_INTR_EVENT_rcv_timeout_MASK) + ((frame_err<<UART_INTR_EVENT_frame_err_OFS)&UART_INTR_EVENT_frame_err_MASK) + ((parity_err<<UART_INTR_EVENT_parity_err_OFS)&UART_INTR_EVENT_parity_err_MASK) + ((underflow_err<<UART_INTR_EVENT_underflow_err_OFS)&UART_INTR_EVENT_underflow_err_MASK) + ((overflow_err<<UART_INTR_EVENT_overflow_err_OFS)&UART_INTR_EVENT_overflow_err_MASK) + ((maj_vote_err<<UART_INTR_EVENT_maj_vote_err_OFS)&UART_INTR_EVENT_maj_vote_err_MASK) + ((tx_fifo_almost_full<<UART_INTR_EVENT_tx_fifo_almost_full_OFS)&UART_INTR_EVENT_tx_fifo_almost_full_MASK) + ((tx_fifo_full<<UART_INTR_EVENT_tx_fifo_full_OFS)&UART_INTR_EVENT_tx_fifo_full_MASK) + ((tx_fifo_almost_empty<<UART_INTR_EVENT_tx_fifo_almost_empty_OFS)&UART_INTR_EVENT_tx_fifo_almost_empty_MASK) + ((tx_fifo_empty<<UART_INTR_EVENT_tx_fifo_empty_OFS)&UART_INTR_EVENT_tx_fifo_empty_MASK) + ((rx_fifo_almost_full<<UART_INTR_EVENT_rx_fifo_almost_full_OFS)&UART_INTR_EVENT_rx_fifo_almost_full_MASK) + ((rx_fifo_full<<UART_INTR_EVENT_rx_fifo_full_OFS)&UART_INTR_EVENT_rx_fifo_full_MASK) + ((rx_fifo_almost_empty<<UART_INTR_EVENT_rx_fifo_almost_empty_OFS)&UART_INTR_EVENT_rx_fifo_almost_empty_MASK) + ((rx_fifo_empty<<UART_INTR_EVENT_rx_fifo_empty_OFS)&UART_INTR_EVENT_rx_fifo_empty_MASK) + ((rcv_negedge<<UART_INTR_EVENT_rcv_negedge_OFS)&UART_INTR_EVENT_rcv_negedge_MASK) + ((rcv_posedge<<UART_INTR_EVENT_rcv_posedge_OFS)&UART_INTR_EVENT_rcv_posedge_MASK) + ((rx_int<<UART_INTR_EVENT_rx_int_OFS)&UART_INTR_EVENT_rx_int_MASK) + ((tx_int<<UART_INTR_EVENT_tx_int_OFS)&UART_INTR_EVENT_tx_int_MASK) + ((cts_int<<UART_INTR_EVENT_cts_int_OFS)&UART_INTR_EVENT_cts_int_MASK) + ((addr_match<<UART_INTR_EVENT_addr_match_OFS)&UART_INTR_EVENT_addr_match_MASK) + ((baud_err<<UART_INTR_EVENT_baud_err_OFS)&UART_INTR_EVENT_baud_err_MASK) + ((eot<<UART_INTR_EVENT_eot_OFS)&UART_INTR_EVENT_eot_MASK) + ((dma_done_tx_intr<<UART_INTR_EVENT_dma_done_tx_intr_OFS)&UART_INTR_EVENT_dma_done_tx_intr_MASK) + ((dma_done_rx_intr<<UART_INTR_EVENT_dma_done_rx_intr_OFS)&UART_INTR_EVENT_dma_done_rx_intr_MASK);
}

static inline void UART_INTR_EN1_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout_en, uint32_t frame_err_en, uint32_t parity_err_en, uint32_t underflow_err_en, uint32_t overflow_err_en, uint32_t maj_vote_err_en, uint32_t tx_fifo_almost_full_en, uint32_t tx_fifo_full_en, uint32_t tx_fifo_almost_empty_en, uint32_t tx_fifo_empty_en, uint32_t rx_fifo_almost_full_en, uint32_t rx_fifo_full_en, uint32_t rx_fifo_almost_empty_en, uint32_t rx_fifo_empty_en, uint32_t rcv_negedge_en, uint32_t rcv_posedge_en) {
    registers->INTR_EN1.packed_w =  + ((rcv_timeout_en<<UART_INTR_EN1_rcv_timeout_en_OFS)&UART_INTR_EN1_rcv_timeout_en_MASK) + ((frame_err_en<<UART_INTR_EN1_frame_err_en_OFS)&UART_INTR_EN1_frame_err_en_MASK) + ((parity_err_en<<UART_INTR_EN1_parity_err_en_OFS)&UART_INTR_EN1_parity_err_en_MASK) + ((underflow_err_en<<UART_INTR_EN1_underflow_err_en_OFS)&UART_INTR_EN1_underflow_err_en_MASK) + ((overflow_err_en<<UART_INTR_EN1_overflow_err_en_OFS)&UART_INTR_EN1_overflow_err_en_MASK) + ((maj_vote_err_en<<UART_INTR_EN1_maj_vote_err_en_OFS)&UART_INTR_EN1_maj_vote_err_en_MASK) + ((tx_fifo_almost_full_en<<UART_INTR_EN1_tx_fifo_almost_full_en_OFS)&UART_INTR_EN1_tx_fifo_almost_full_en_MASK) + ((tx_fifo_full_en<<UART_INTR_EN1_tx_fifo_full_en_OFS)&UART_INTR_EN1_tx_fifo_full_en_MASK) + ((tx_fifo_almost_empty_en<<UART_INTR_EN1_tx_fifo_almost_empty_en_OFS)&UART_INTR_EN1_tx_fifo_almost_empty_en_MASK) + ((tx_fifo_empty_en<<UART_INTR_EN1_tx_fifo_empty_en_OFS)&UART_INTR_EN1_tx_fifo_empty_en_MASK) + ((rx_fifo_almost_full_en<<UART_INTR_EN1_rx_fifo_almost_full_en_OFS)&UART_INTR_EN1_rx_fifo_almost_full_en_MASK) + ((rx_fifo_full_en<<UART_INTR_EN1_rx_fifo_full_en_OFS)&UART_INTR_EN1_rx_fifo_full_en_MASK) + ((rx_fifo_almost_empty_en<<UART_INTR_EN1_rx_fifo_almost_empty_en_OFS)&UART_INTR_EN1_rx_fifo_almost_empty_en_MASK) + ((rx_fifo_empty_en<<UART_INTR_EN1_rx_fifo_empty_en_OFS)&UART_INTR_EN1_rx_fifo_empty_en_MASK) + ((rcv_negedge_en<<UART_INTR_EN1_rcv_negedge_en_OFS)&UART_INTR_EN1_rcv_negedge_en_MASK) + ((rcv_posedge_en<<UART_INTR_EN1_rcv_posedge_en_OFS)&UART_INTR_EN1_rcv_posedge_en_MASK);
}

static inline void UART_INTR_EN2_WRITE(UART_REGS_s * registers, uint32_t rx_int_en, uint32_t tx_int_en, uint32_t cts_int_en, uint32_t addr_match_en, uint32_t baud_err_en, uint32_t eot_en, uint32_t dma_done_tx_intr_en, uint32_t dma_done_rx_intr_en) {
    registers->INTR_EN2.packed_w =  + ((rx_int_en<<UART_INTR_EN2_rx_int_en_OFS)&UART_INTR_EN2_rx_int_en_MASK) + ((tx_int_en<<UART_INTR_EN2_tx_int_en_OFS)&UART_INTR_EN2_tx_int_en_MASK) + ((cts_int_en<<UART_INTR_EN2_cts_int_en_OFS)&UART_INTR_EN2_cts_int_en_MASK) + ((addr_match_en<<UART_INTR_EN2_addr_match_en_OFS)&UART_INTR_EN2_addr_match_en_MASK) + ((baud_err_en<<UART_INTR_EN2_baud_err_en_OFS)&UART_INTR_EN2_baud_err_en_MASK) + ((eot_en<<UART_INTR_EN2_eot_en_OFS)&UART_INTR_EN2_eot_en_MASK) + ((dma_done_tx_intr_en<<UART_INTR_EN2_dma_done_tx_intr_en_OFS)&UART_INTR_EN2_dma_done_tx_intr_en_MASK) + ((dma_done_rx_intr_en<<UART_INTR_EN2_dma_done_rx_intr_en_OFS)&UART_INTR_EN2_dma_done_rx_intr_en_MASK);
}

static inline void UART_INTR_NMI_EN1_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout_nmi_en, uint32_t frame_err_nmi_en, uint32_t parity_err_nmi_en, uint32_t underflow_err_nmi_en, uint32_t overflow_err_nmi_en, uint32_t maj_vote_err_nmi_en, uint32_t tx_fifo_almost_full_nmi_en, uint32_t tx_fifo_full_nmi_en, uint32_t tx_fifo_almost_empty_nmi_en, uint32_t tx_fifo_empty_nmi_en, uint32_t rx_fifo_almost_full_nmi_en, uint32_t rx_fifo_full_nmi_en, uint32_t rx_fifo_almost_empty_nmi_en, uint32_t rx_fifo_empty_nmi_en, uint32_t rcv_negedge_nmi_en, uint32_t rcv_posedge_nmi_en) {
    registers->INTR_NMI_EN1.packed_w =  + ((rcv_timeout_nmi_en<<UART_INTR_NMI_EN1_rcv_timeout_nmi_en_OFS)&UART_INTR_NMI_EN1_rcv_timeout_nmi_en_MASK) + ((frame_err_nmi_en<<UART_INTR_NMI_EN1_frame_err_nmi_en_OFS)&UART_INTR_NMI_EN1_frame_err_nmi_en_MASK) + ((parity_err_nmi_en<<UART_INTR_NMI_EN1_parity_err_nmi_en_OFS)&UART_INTR_NMI_EN1_parity_err_nmi_en_MASK) + ((underflow_err_nmi_en<<UART_INTR_NMI_EN1_underflow_err_nmi_en_OFS)&UART_INTR_NMI_EN1_underflow_err_nmi_en_MASK) + ((overflow_err_nmi_en<<UART_INTR_NMI_EN1_overflow_err_nmi_en_OFS)&UART_INTR_NMI_EN1_overflow_err_nmi_en_MASK) + ((maj_vote_err_nmi_en<<UART_INTR_NMI_EN1_maj_vote_err_nmi_en_OFS)&UART_INTR_NMI_EN1_maj_vote_err_nmi_en_MASK) + ((tx_fifo_almost_full_nmi_en<<UART_INTR_NMI_EN1_tx_fifo_almost_full_nmi_en_OFS)&UART_INTR_NMI_EN1_tx_fifo_almost_full_nmi_en_MASK) + ((tx_fifo_full_nmi_en<<UART_INTR_NMI_EN1_tx_fifo_full_nmi_en_OFS)&UART_INTR_NMI_EN1_tx_fifo_full_nmi_en_MASK) + ((tx_fifo_almost_empty_nmi_en<<UART_INTR_NMI_EN1_tx_fifo_almost_empty_nmi_en_OFS)&UART_INTR_NMI_EN1_tx_fifo_almost_empty_nmi_en_MASK) + ((tx_fifo_empty_nmi_en<<UART_INTR_NMI_EN1_tx_fifo_empty_nmi_en_OFS)&UART_INTR_NMI_EN1_tx_fifo_empty_nmi_en_MASK) + ((rx_fifo_almost_full_nmi_en<<UART_INTR_NMI_EN1_rx_fifo_almost_full_nmi_en_OFS)&UART_INTR_NMI_EN1_rx_fifo_almost_full_nmi_en_MASK) + ((rx_fifo_full_nmi_en<<UART_INTR_NMI_EN1_rx_fifo_full_nmi_en_OFS)&UART_INTR_NMI_EN1_rx_fifo_full_nmi_en_MASK) + ((rx_fifo_almost_empty_nmi_en<<UART_INTR_NMI_EN1_rx_fifo_almost_empty_nmi_en_OFS)&UART_INTR_NMI_EN1_rx_fifo_almost_empty_nmi_en_MASK) + ((rx_fifo_empty_nmi_en<<UART_INTR_NMI_EN1_rx_fifo_empty_nmi_en_OFS)&UART_INTR_NMI_EN1_rx_fifo_empty_nmi_en_MASK) + ((rcv_negedge_nmi_en<<UART_INTR_NMI_EN1_rcv_negedge_nmi_en_OFS)&UART_INTR_NMI_EN1_rcv_negedge_nmi_en_MASK) + ((rcv_posedge_nmi_en<<UART_INTR_NMI_EN1_rcv_posedge_nmi_en_OFS)&UART_INTR_NMI_EN1_rcv_posedge_nmi_en_MASK);
}

static inline void UART_INTR_NMI_EN2_WRITE(UART_REGS_s * registers, uint32_t rx_int_nmi_en, uint32_t tx_int_nmi_en, uint32_t cts_int_nmi_en, uint32_t addr_match_nmi_en, uint32_t baud_err_nmi_en, uint32_t eot_nmi_en, uint32_t dma_done_tx_intr_nmi_en, uint32_t dma_done_rx_intr_nmi_en) {
    registers->INTR_NMI_EN2.packed_w =  + ((rx_int_nmi_en<<UART_INTR_NMI_EN2_rx_int_nmi_en_OFS)&UART_INTR_NMI_EN2_rx_int_nmi_en_MASK) + ((tx_int_nmi_en<<UART_INTR_NMI_EN2_tx_int_nmi_en_OFS)&UART_INTR_NMI_EN2_tx_int_nmi_en_MASK) + ((cts_int_nmi_en<<UART_INTR_NMI_EN2_cts_int_nmi_en_OFS)&UART_INTR_NMI_EN2_cts_int_nmi_en_MASK) + ((addr_match_nmi_en<<UART_INTR_NMI_EN2_addr_match_nmi_en_OFS)&UART_INTR_NMI_EN2_addr_match_nmi_en_MASK) + ((baud_err_nmi_en<<UART_INTR_NMI_EN2_baud_err_nmi_en_OFS)&UART_INTR_NMI_EN2_baud_err_nmi_en_MASK) + ((eot_nmi_en<<UART_INTR_NMI_EN2_eot_nmi_en_OFS)&UART_INTR_NMI_EN2_eot_nmi_en_MASK) + ((dma_done_tx_intr_nmi_en<<UART_INTR_NMI_EN2_dma_done_tx_intr_nmi_en_OFS)&UART_INTR_NMI_EN2_dma_done_tx_intr_nmi_en_MASK) + ((dma_done_rx_intr_nmi_en<<UART_INTR_NMI_EN2_dma_done_rx_intr_nmi_en_OFS)&UART_INTR_NMI_EN2_dma_done_rx_intr_nmi_en_MASK);
}

static inline void UART_INTR_SW_SET_WRITE(UART_REGS_s * registers, uint32_t rcv_timeout_sw_set, uint32_t frame_err_sw_set, uint32_t parity_err_sw_set, uint32_t underflow_err_sw_set, uint32_t overflow_err_sw_set, uint32_t maj_vote_err_sw_set, uint32_t tx_fifo_almost_full_sw_set, uint32_t tx_fifo_full_sw_set, uint32_t tx_fifo_almost_empty_sw_set, uint32_t tx_fifo_empty_sw_set, uint32_t rx_fifo_almost_full_sw_set, uint32_t rx_fifo_full_sw_set, uint32_t rx_fifo_almost_empty_sw_set, uint32_t rx_fifo_empty_sw_set, uint32_t rcv_negedge_sw_set, uint32_t rcv_posedge_sw_set, uint32_t rx_int_sw_set, uint32_t tx_int_sw_set, uint32_t cts_int_sw_set, uint32_t addr_match_sw_set, uint32_t baud_err_sw_set, uint32_t eot_sw_set, uint32_t dma_done_tx_intr_sw_set, uint32_t dma_done_rx_intr_sw_set) {
    registers->INTR_SW_SET.packed_w =  + ((rcv_timeout_sw_set<<UART_INTR_SW_SET_rcv_timeout_sw_set_OFS)&UART_INTR_SW_SET_rcv_timeout_sw_set_MASK) + ((frame_err_sw_set<<UART_INTR_SW_SET_frame_err_sw_set_OFS)&UART_INTR_SW_SET_frame_err_sw_set_MASK) + ((parity_err_sw_set<<UART_INTR_SW_SET_parity_err_sw_set_OFS)&UART_INTR_SW_SET_parity_err_sw_set_MASK) + ((underflow_err_sw_set<<UART_INTR_SW_SET_underflow_err_sw_set_OFS)&UART_INTR_SW_SET_underflow_err_sw_set_MASK) + ((overflow_err_sw_set<<UART_INTR_SW_SET_overflow_err_sw_set_OFS)&UART_INTR_SW_SET_overflow_err_sw_set_MASK) + ((maj_vote_err_sw_set<<UART_INTR_SW_SET_maj_vote_err_sw_set_OFS)&UART_INTR_SW_SET_maj_vote_err_sw_set_MASK) + ((tx_fifo_almost_full_sw_set<<UART_INTR_SW_SET_tx_fifo_almost_full_sw_set_OFS)&UART_INTR_SW_SET_tx_fifo_almost_full_sw_set_MASK) + ((tx_fifo_full_sw_set<<UART_INTR_SW_SET_tx_fifo_full_sw_set_OFS)&UART_INTR_SW_SET_tx_fifo_full_sw_set_MASK) + ((tx_fifo_almost_empty_sw_set<<UART_INTR_SW_SET_tx_fifo_almost_empty_sw_set_OFS)&UART_INTR_SW_SET_tx_fifo_almost_empty_sw_set_MASK) + ((tx_fifo_empty_sw_set<<UART_INTR_SW_SET_tx_fifo_empty_sw_set_OFS)&UART_INTR_SW_SET_tx_fifo_empty_sw_set_MASK) + ((rx_fifo_almost_full_sw_set<<UART_INTR_SW_SET_rx_fifo_almost_full_sw_set_OFS)&UART_INTR_SW_SET_rx_fifo_almost_full_sw_set_MASK) + ((rx_fifo_full_sw_set<<UART_INTR_SW_SET_rx_fifo_full_sw_set_OFS)&UART_INTR_SW_SET_rx_fifo_full_sw_set_MASK) + ((rx_fifo_almost_empty_sw_set<<UART_INTR_SW_SET_rx_fifo_almost_empty_sw_set_OFS)&UART_INTR_SW_SET_rx_fifo_almost_empty_sw_set_MASK) + ((rx_fifo_empty_sw_set<<UART_INTR_SW_SET_rx_fifo_empty_sw_set_OFS)&UART_INTR_SW_SET_rx_fifo_empty_sw_set_MASK) + ((rcv_negedge_sw_set<<UART_INTR_SW_SET_rcv_negedge_sw_set_OFS)&UART_INTR_SW_SET_rcv_negedge_sw_set_MASK) + ((rcv_posedge_sw_set<<UART_INTR_SW_SET_rcv_posedge_sw_set_OFS)&UART_INTR_SW_SET_rcv_posedge_sw_set_MASK) + ((rx_int_sw_set<<UART_INTR_SW_SET_rx_int_sw_set_OFS)&UART_INTR_SW_SET_rx_int_sw_set_MASK) + ((tx_int_sw_set<<UART_INTR_SW_SET_tx_int_sw_set_OFS)&UART_INTR_SW_SET_tx_int_sw_set_MASK) + ((cts_int_sw_set<<UART_INTR_SW_SET_cts_int_sw_set_OFS)&UART_INTR_SW_SET_cts_int_sw_set_MASK) + ((addr_match_sw_set<<UART_INTR_SW_SET_addr_match_sw_set_OFS)&UART_INTR_SW_SET_addr_match_sw_set_MASK) + ((baud_err_sw_set<<UART_INTR_SW_SET_baud_err_sw_set_OFS)&UART_INTR_SW_SET_baud_err_sw_set_MASK) + ((eot_sw_set<<UART_INTR_SW_SET_eot_sw_set_OFS)&UART_INTR_SW_SET_eot_sw_set_MASK) + ((dma_done_tx_intr_sw_set<<UART_INTR_SW_SET_dma_done_tx_intr_sw_set_OFS)&UART_INTR_SW_SET_dma_done_tx_intr_sw_set_MASK) + ((dma_done_rx_intr_sw_set<<UART_INTR_SW_SET_dma_done_rx_intr_sw_set_OFS)&UART_INTR_SW_SET_dma_done_rx_intr_sw_set_MASK);
}

static inline void UART_DMA_RX_INTR_EN1_WRITE(UART_REGS_s * registers, uint32_t dma_rx_rcv_timeout_en, uint32_t dma_rx_frame_err_en, uint32_t dma_rx_parity_err_en, uint32_t dma_rx_underflow_err_en, uint32_t dma_rx_overflow_err_en, uint32_t dma_rx_maj_vote_err_en, uint32_t dma_rx_tx_fifo_almost_full_en, uint32_t dma_rx_tx_fifo_full_en, uint32_t dma_rx_tx_fifo_almost_empty_en, uint32_t dma_rx_tx_fifo_empty_en, uint32_t dma_rx_rx_fifo_almost_full_en, uint32_t dma_rx_rx_fifo_full_en, uint32_t dma_rx_rx_fifo_almost_empty_en, uint32_t dma_rx_rx_fifo_empty_en, uint32_t dma_rx_rcv_negedge_en, uint32_t dma_rx_rcv_posedge_en) {
    registers->DMA_RX_INTR_EN1.packed_w =  + ((dma_rx_rcv_timeout_en<<UART_DMA_RX_INTR_EN1_dma_rx_rcv_timeout_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_rcv_timeout_en_MASK) + ((dma_rx_frame_err_en<<UART_DMA_RX_INTR_EN1_dma_rx_frame_err_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_frame_err_en_MASK) + ((dma_rx_parity_err_en<<UART_DMA_RX_INTR_EN1_dma_rx_parity_err_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_parity_err_en_MASK) + ((dma_rx_underflow_err_en<<UART_DMA_RX_INTR_EN1_dma_rx_underflow_err_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_underflow_err_en_MASK) + ((dma_rx_overflow_err_en<<UART_DMA_RX_INTR_EN1_dma_rx_overflow_err_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_overflow_err_en_MASK) + ((dma_rx_maj_vote_err_en<<UART_DMA_RX_INTR_EN1_dma_rx_maj_vote_err_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_maj_vote_err_en_MASK) + ((dma_rx_tx_fifo_almost_full_en<<UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_almost_full_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_almost_full_en_MASK) + ((dma_rx_tx_fifo_full_en<<UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_full_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_full_en_MASK) + ((dma_rx_tx_fifo_almost_empty_en<<UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_almost_empty_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_almost_empty_en_MASK) + ((dma_rx_tx_fifo_empty_en<<UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_empty_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_tx_fifo_empty_en_MASK) + ((dma_rx_rx_fifo_almost_full_en<<UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_almost_full_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_almost_full_en_MASK) + ((dma_rx_rx_fifo_full_en<<UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_full_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_full_en_MASK) + ((dma_rx_rx_fifo_almost_empty_en<<UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_almost_empty_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_almost_empty_en_MASK) + ((dma_rx_rx_fifo_empty_en<<UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_empty_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_rx_fifo_empty_en_MASK) + ((dma_rx_rcv_negedge_en<<UART_DMA_RX_INTR_EN1_dma_rx_rcv_negedge_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_rcv_negedge_en_MASK) + ((dma_rx_rcv_posedge_en<<UART_DMA_RX_INTR_EN1_dma_rx_rcv_posedge_en_OFS)&UART_DMA_RX_INTR_EN1_dma_rx_rcv_posedge_en_MASK);
}

static inline void UART_DMA_RX_INTR_EN2_WRITE(UART_REGS_s * registers, uint32_t dma_rx_rx_int_en, uint32_t dma_rx_tx_int_en, uint32_t dma_rx_cts_int_en, uint32_t dma_rx_addr_match_en, uint32_t dma_rx_baud_err_en, uint32_t dma_rx_eot_en, uint32_t dma_rx_dma_done_tx_intr_en, uint32_t dma_rx_dma_done_rx_intr_en) {
    registers->DMA_RX_INTR_EN2.packed_w =  + ((dma_rx_rx_int_en<<UART_DMA_RX_INTR_EN2_dma_rx_rx_int_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_rx_int_en_MASK) + ((dma_rx_tx_int_en<<UART_DMA_RX_INTR_EN2_dma_rx_tx_int_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_tx_int_en_MASK) + ((dma_rx_cts_int_en<<UART_DMA_RX_INTR_EN2_dma_rx_cts_int_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_cts_int_en_MASK) + ((dma_rx_addr_match_en<<UART_DMA_RX_INTR_EN2_dma_rx_addr_match_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_addr_match_en_MASK) + ((dma_rx_baud_err_en<<UART_DMA_RX_INTR_EN2_dma_rx_baud_err_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_baud_err_en_MASK) + ((dma_rx_eot_en<<UART_DMA_RX_INTR_EN2_dma_rx_eot_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_eot_en_MASK) + ((dma_rx_dma_done_tx_intr_en<<UART_DMA_RX_INTR_EN2_dma_rx_dma_done_tx_intr_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_dma_done_tx_intr_en_MASK) + ((dma_rx_dma_done_rx_intr_en<<UART_DMA_RX_INTR_EN2_dma_rx_dma_done_rx_intr_en_OFS)&UART_DMA_RX_INTR_EN2_dma_rx_dma_done_rx_intr_en_MASK);
}

static inline void UART_DMA_TX_INTR_EN1_WRITE(UART_REGS_s * registers, uint32_t dma_tx_rcv_timeout_en, uint32_t dma_tx_frame_err_en, uint32_t dma_tx_parity_err_en, uint32_t dma_tx_underflow_err_en, uint32_t dma_tx_overflow_err_en, uint32_t dma_tx_maj_vote_err_en, uint32_t dma_tx_tx_fifo_almost_full_en, uint32_t dma_tx_tx_fifo_full_en, uint32_t dma_tx_tx_fifo_almost_empty_en, uint32_t dma_tx_tx_fifo_empty_en, uint32_t dma_tx_rx_fifo_almost_full_en, uint32_t dma_tx_rx_fifo_full_en, uint32_t dma_tx_rx_fifo_almost_empty_en, uint32_t dma_tx_rx_fifo_empty_en, uint32_t dma_tx_rcv_negedge_en, uint32_t dma_tx_rcv_posedge_en) {
    registers->DMA_TX_INTR_EN1.packed_w =  + ((dma_tx_rcv_timeout_en<<UART_DMA_TX_INTR_EN1_dma_tx_rcv_timeout_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_rcv_timeout_en_MASK) + ((dma_tx_frame_err_en<<UART_DMA_TX_INTR_EN1_dma_tx_frame_err_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_frame_err_en_MASK) + ((dma_tx_parity_err_en<<UART_DMA_TX_INTR_EN1_dma_tx_parity_err_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_parity_err_en_MASK) + ((dma_tx_underflow_err_en<<UART_DMA_TX_INTR_EN1_dma_tx_underflow_err_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_underflow_err_en_MASK) + ((dma_tx_overflow_err_en<<UART_DMA_TX_INTR_EN1_dma_tx_overflow_err_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_overflow_err_en_MASK) + ((dma_tx_maj_vote_err_en<<UART_DMA_TX_INTR_EN1_dma_tx_maj_vote_err_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_maj_vote_err_en_MASK) + ((dma_tx_tx_fifo_almost_full_en<<UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_almost_full_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_almost_full_en_MASK) + ((dma_tx_tx_fifo_full_en<<UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_full_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_full_en_MASK) + ((dma_tx_tx_fifo_almost_empty_en<<UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_almost_empty_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_almost_empty_en_MASK) + ((dma_tx_tx_fifo_empty_en<<UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_empty_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_tx_fifo_empty_en_MASK) + ((dma_tx_rx_fifo_almost_full_en<<UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_almost_full_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_almost_full_en_MASK) + ((dma_tx_rx_fifo_full_en<<UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_full_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_full_en_MASK) + ((dma_tx_rx_fifo_almost_empty_en<<UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_almost_empty_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_almost_empty_en_MASK) + ((dma_tx_rx_fifo_empty_en<<UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_empty_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_rx_fifo_empty_en_MASK) + ((dma_tx_rcv_negedge_en<<UART_DMA_TX_INTR_EN1_dma_tx_rcv_negedge_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_rcv_negedge_en_MASK) + ((dma_tx_rcv_posedge_en<<UART_DMA_TX_INTR_EN1_dma_tx_rcv_posedge_en_OFS)&UART_DMA_TX_INTR_EN1_dma_tx_rcv_posedge_en_MASK);
}

static inline void UART_DMA_TX_INTR_EN2_WRITE(UART_REGS_s * registers, uint32_t dma_tx_rx_int_en, uint32_t dma_tx_tx_int_en, uint32_t dma_tx_cts_int_en, uint32_t dma_tx_addr_match_en, uint32_t dma_tx_baud_err_en, uint32_t dma_tx_eot_en, uint32_t dma_tx_dma_done_tx_intr_en, uint32_t dma_tx_dma_done_rx_intr_en) {
    registers->DMA_TX_INTR_EN2.packed_w =  + ((dma_tx_rx_int_en<<UART_DMA_TX_INTR_EN2_dma_tx_rx_int_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_rx_int_en_MASK) + ((dma_tx_tx_int_en<<UART_DMA_TX_INTR_EN2_dma_tx_tx_int_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_tx_int_en_MASK) + ((dma_tx_cts_int_en<<UART_DMA_TX_INTR_EN2_dma_tx_cts_int_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_cts_int_en_MASK) + ((dma_tx_addr_match_en<<UART_DMA_TX_INTR_EN2_dma_tx_addr_match_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_addr_match_en_MASK) + ((dma_tx_baud_err_en<<UART_DMA_TX_INTR_EN2_dma_tx_baud_err_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_baud_err_en_MASK) + ((dma_tx_eot_en<<UART_DMA_TX_INTR_EN2_dma_tx_eot_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_eot_en_MASK) + ((dma_tx_dma_done_tx_intr_en<<UART_DMA_TX_INTR_EN2_dma_tx_dma_done_tx_intr_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_dma_done_tx_intr_en_MASK) + ((dma_tx_dma_done_rx_intr_en<<UART_DMA_TX_INTR_EN2_dma_tx_dma_done_rx_intr_en_OFS)&UART_DMA_TX_INTR_EN2_dma_tx_dma_done_rx_intr_en_MASK);
}

static inline void UART_INTR_STS_WRITE(UART_REGS_s * registers, uint32_t intr_first) {
    registers->INTR_STS.packed_w =  + ((intr_first<<UART_INTR_STS_intr_first_OFS)&UART_INTR_STS_intr_first_MASK);
}

static inline void UART_UART_CLKCFG_WRITE(UART_REGS_s * registers, uint32_t blck_async, uint32_t async_req_en_key) {
    registers->UART_CLKCFG.packed_w =  + ((blck_async<<UART_UART_CLKCFG_blck_async_OFS)&UART_UART_CLKCFG_blck_async_MASK) + ((async_req_en_key<<UART_UART_CLKCFG_async_req_en_key_OFS)&UART_UART_CLKCFG_async_req_en_key_MASK);
}

static inline void UART_UART_FIFOLS_WRITE(UART_REGS_s * registers, uint32_t tx_fifo_ls, uint32_t rx_to, uint32_t rx_fifo_ls) {
    registers->UART_FIFOLS.packed_w =  + ((tx_fifo_ls<<UART_UART_FIFOLS_tx_fifo_ls_OFS)&UART_UART_FIFOLS_tx_fifo_ls_MASK) + ((rx_to<<UART_UART_FIFOLS_rx_to_OFS)&UART_UART_FIFOLS_rx_to_MASK) + ((rx_fifo_ls<<UART_UART_FIFOLS_rx_fifo_ls_OFS)&UART_UART_FIFOLS_rx_fifo_ls_MASK);
}

static inline void UART_UART_FIFOSTS_WRITE(UART_REGS_s * registers, uint32_t tx_fifo_full_sts, uint32_t tx_fifo_almost_full_sts, uint32_t tx_fifo_empty_sts, uint32_t tx_fifo_almost_empty_sts, uint32_t rx_fifo_full_sts, uint32_t rx_fifo_almost_full_sts, uint32_t rx_fifo_empty_sts, uint32_t rx_fifo_almost_empty_sts) {
    registers->UART_FIFOSTS.packed_w =  + ((tx_fifo_full_sts<<UART_UART_FIFOSTS_tx_fifo_full_sts_OFS)&UART_UART_FIFOSTS_tx_fifo_full_sts_MASK) + ((tx_fifo_almost_full_sts<<UART_UART_FIFOSTS_tx_fifo_almost_full_sts_OFS)&UART_UART_FIFOSTS_tx_fifo_almost_full_sts_MASK) + ((tx_fifo_empty_sts<<UART_UART_FIFOSTS_tx_fifo_empty_sts_OFS)&UART_UART_FIFOSTS_tx_fifo_empty_sts_MASK) + ((tx_fifo_almost_empty_sts<<UART_UART_FIFOSTS_tx_fifo_almost_empty_sts_OFS)&UART_UART_FIFOSTS_tx_fifo_almost_empty_sts_MASK) + ((rx_fifo_full_sts<<UART_UART_FIFOSTS_rx_fifo_full_sts_OFS)&UART_UART_FIFOSTS_rx_fifo_full_sts_MASK) + ((rx_fifo_almost_full_sts<<UART_UART_FIFOSTS_rx_fifo_almost_full_sts_OFS)&UART_UART_FIFOSTS_rx_fifo_almost_full_sts_MASK) + ((rx_fifo_empty_sts<<UART_UART_FIFOSTS_rx_fifo_empty_sts_OFS)&UART_UART_FIFOSTS_rx_fifo_empty_sts_MASK) + ((rx_fifo_almost_empty_sts<<UART_UART_FIFOSTS_rx_fifo_almost_empty_sts_OFS)&UART_UART_FIFOSTS_rx_fifo_almost_empty_sts_MASK);
}

static inline void UART_UART_CFG_WRITE(UART_REGS_s * registers, uint32_t wrd_len, uint32_t par_en, uint32_t evn_par, uint32_t stck_par, uint32_t stop_bit, uint32_t send_idle) {
    registers->UART_CFG.packed_w =  + ((wrd_len<<UART_UART_CFG_wrd_len_OFS)&UART_UART_CFG_wrd_len_MASK) + ((par_en<<UART_UART_CFG_par_en_OFS)&UART_UART_CFG_par_en_MASK) + ((evn_par<<UART_UART_CFG_evn_par_OFS)&UART_UART_CFG_evn_par_MASK) + ((stck_par<<UART_UART_CFG_stck_par_OFS)&UART_UART_CFG_stck_par_MASK) + ((stop_bit<<UART_UART_CFG_stop_bit_OFS)&UART_UART_CFG_stop_bit_MASK) + ((send_idle<<UART_UART_CFG_send_idle_OFS)&UART_UART_CFG_send_idle_MASK);
}

static inline void UART_UART_GFCTL_WRITE(UART_REGS_s * registers, uint32_t gf_width) {
    registers->UART_GFCTL.packed_w =  + ((gf_width<<UART_UART_GFCTL_gf_width_OFS)&UART_UART_GFCTL_gf_width_MASK);
}

static inline void UART_UART_BRDNUM_WRITE(UART_REGS_s * registers, uint32_t num_m) {
    registers->UART_BRDNUM.packed_w =  + ((num_m<<UART_UART_BRDNUM_num_m_OFS)&UART_UART_BRDNUM_num_m_MASK);
}

static inline void UART_UART_BRDDEN_WRITE(UART_REGS_s * registers, uint32_t den_n) {
    registers->UART_BRDDEN.packed_w =  + ((den_n<<UART_UART_BRDDEN_den_n_OFS)&UART_UART_BRDDEN_den_n_MASK);
}

static inline void UART_UART_CTRL_WRITE(UART_REGS_s * registers, uint32_t uart_en, uint32_t uart_msb, uint32_t majvote_en, uint32_t fifo_en, uint32_t os, uint32_t loopback_en, uint32_t mode, uint32_t tx_en, uint32_t rx_en, uint32_t tx_out_en, uint32_t tx_out_ctrl, uint32_t cts_en, uint32_t rts_en, uint32_t rts_val) {
    registers->UART_CTRL.packed_w =  + ((uart_en<<UART_UART_CTRL_uart_en_OFS)&UART_UART_CTRL_uart_en_MASK) + ((uart_msb<<UART_UART_CTRL_uart_msb_OFS)&UART_UART_CTRL_uart_msb_MASK) + ((majvote_en<<UART_UART_CTRL_majvote_en_OFS)&UART_UART_CTRL_majvote_en_MASK) + ((fifo_en<<UART_UART_CTRL_fifo_en_OFS)&UART_UART_CTRL_fifo_en_MASK) + ((os<<UART_UART_CTRL_os_OFS)&UART_UART_CTRL_os_MASK) + ((loopback_en<<UART_UART_CTRL_loopback_en_OFS)&UART_UART_CTRL_loopback_en_MASK) + ((mode<<UART_UART_CTRL_mode_OFS)&UART_UART_CTRL_mode_MASK) + ((tx_en<<UART_UART_CTRL_tx_en_OFS)&UART_UART_CTRL_tx_en_MASK) + ((rx_en<<UART_UART_CTRL_rx_en_OFS)&UART_UART_CTRL_rx_en_MASK) + ((tx_out_en<<UART_UART_CTRL_tx_out_en_OFS)&UART_UART_CTRL_tx_out_en_MASK) + ((tx_out_ctrl<<UART_UART_CTRL_tx_out_ctrl_OFS)&UART_UART_CTRL_tx_out_ctrl_MASK) + ((cts_en<<UART_UART_CTRL_cts_en_OFS)&UART_UART_CTRL_cts_en_MASK) + ((rts_en<<UART_UART_CTRL_rts_en_OFS)&UART_UART_CTRL_rts_en_MASK) + ((rts_val<<UART_UART_CTRL_rts_val_OFS)&UART_UART_CTRL_rts_val_MASK);
}

static inline void UART_UART_ADDR_WRITE(UART_REGS_s * registers, uint32_t uart_addr) {
    registers->UART_ADDR.packed_w =  + ((uart_addr<<UART_UART_ADDR_uart_addr_OFS)&UART_UART_ADDR_uart_addr_MASK);
}

static inline void UART_UART_ADDRMASK_WRITE(UART_REGS_s * registers, uint32_t addr_mask) {
    registers->UART_ADDRMASK.packed_w =  + ((addr_mask<<UART_UART_ADDRMASK_addr_mask_OFS)&UART_UART_ADDRMASK_addr_mask_MASK);
}

static inline void UART_STS_WRITE(UART_REGS_s * registers, uint32_t cts_sts, uint32_t busy, uint32_t idle) {
    registers->STS.packed_w =  + ((cts_sts<<UART_STS_cts_sts_OFS)&UART_STS_cts_sts_MASK) + ((busy<<UART_STS_busy_OFS)&UART_STS_busy_MASK) + ((idle<<UART_STS_idle_OFS)&UART_STS_idle_MASK);
}

static inline void UART_FSM_STS_WRITE(UART_REGS_s * registers, uint32_t tx_state, uint32_t rx_state) {
    registers->FSM_STS.packed_w =  + ((tx_state<<UART_FSM_STS_tx_state_OFS)&UART_FSM_STS_tx_state_MASK) + ((rx_state<<UART_FSM_STS_rx_state_OFS)&UART_FSM_STS_rx_state_MASK);
}

